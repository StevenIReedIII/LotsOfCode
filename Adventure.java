import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.Scanner;
/*
█████████████████████████
█╬╬╬╬╬█▒▒▒▒▒▒▒▒▒▒▒▒▒█████
█╬╬╬╬╬█▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒██
█╬╬╬╬╬█▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒███
██░░██████████████░░░████
█╬░░╬█   █   █   █░░░   █
█╬░░╬█ █   █   █  ░░░   █
██░░██████████████░░░   █
█ ░░░░░░░░░░░░░░░░░░░   █
██████████ ░░░ ██████████
█▒▒▒▒▒▒▒▒█ ░░░ █▒▒▒▒▒▒▒▒█
█▒▒▒▒▒▒▒▒▒ ░░░ ▒▒▒▒▒▒▒▒▒█
█▒▒▒▒▒▒▒▒█ ░░░ █▒▒▒▒▒▒▒▒█
█████████████████████████
 */

import javax.swing.JFrame;
import javax.swing.JTextField;

public class Adventure {
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		String userIn;
		System.out.println("Welcome press anything to start>>");
		String joe = scan.nextLine();
		JTextField textField = new JTextField();
		 
		  textField.addKeyListener(new keyListened());
		 
		  JFrame jframe = new JFrame();
		 
		  jframe.add(textField);
		 
		  jframe.setSize(400, 350);
		 
		  jframe.setVisible(true);
	}
}
class keyListened extends KeyAdapter{
	public int place1 = 1;
	public int place2 = 1;
	public void keyPressed(KeyEvent event) {
		
		
		
		int run = 0;
		String whichMap = "map1P2";
		boolean skip = false;
		boolean reprint = true;
		
			skip = false;
			char[][] map1P1 = {{'█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█',},
							 {'█',' ',' ',' ',' ',' ','█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█',},
							 {'║',' ',' ',' ',' ',' ','█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█',},
							 {'█',' ',' ',' ',' ',' ','█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█',},
							 {'█','█',' ',' ','█','█','█','█','█','█','█','█','█','█','█','█','█','█',' ',' ',' ','█','█','█','█',},
							 {'█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█',},
							 {'█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█',},
							 {'█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█',},
							 {'█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█',},
							 {'█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█',},
							 {'█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█',},
							 {'█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█',},
							 {'█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█',},
							 {'█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█',}};
			char[][] map1P2 = {{'█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█',},
							   {'█','╬','╬','╬','╬','╬','█','▒','▒','▒','▒','▒','▒','▒','▒','▒','▒','▒','▒','▒','█','█','█','█','█',},
							   {'█','╬','╬','╬','╬','╬','█','▒','▒','▒','▒','▒','▒','▒','▒','▒','▒','▒','▒','▒','▒','▒','▒','█','█',},
							   {'█','╬','╬','╬','╬','╬','█','▒','▒','▒','▒','▒','▒','▒','▒','▒','▒','▒','▒','▒','▒','▒','█','█','█',},
							   {'█','█','░','░','█','█','█','█','█','█','█','█','█','█','█','█','█','█','░','░','░','█','█','█','█',},
							   {'█','╬','░','░','╬','█',' ',' ',' ','█',' ',' ',' ','█',' ',' ',' ','█','░','░','░',' ',' ',' ','█',},
							   {'█','╬','░','░','╬','█',' ','█',' ',' ',' ','█',' ',' ',' ','█',' ',' ','░','░','░',' ',' ',' ','║',},
							   {'█','█','░','░','█','█','█','█','█','█','█','█','█','█','█','█','█','█','░','░','░',' ',' ',' ','║',},
							   {'█',' ','░','░','░','░','░','░','░','░','░','░','░','░','░','░','░','░','░','░','░',' ',' ',' ','█',},
							   {'█','█','█','█','█','█','█','█','█','█',' ','░','░','░',' ','█','█','█','█','█','█','█','█','█','█',},
							   {'█','▒','▒','▒','▒','▒','▒','▒','▒','█',' ','░','░','░',' ','█','▒','▒','▒','▒','▒','▒','▒','▒','█',},
							   {'█','▒','▒','▒','▒','▒','▒','▒','▒','▒',' ','░','░','░',' ','▒','▒','▒','▒','▒','▒','▒','▒','▒','█',},
							   {'█','▒','▒','▒','▒','▒','▒','▒','▒','█',' ','░','░','░',' ','█','▒','▒','▒','▒','▒','▒','▒','▒','█',},
							   {'█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█',}};


			
			char[][]map2 = {{'█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█'},
					{'█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█'},
					{'█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█'},
					{'█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█'},
					{'█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█'},
					{'█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█'},
					{'█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█'},
					{'█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█'},
					{'█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█'},
					{'█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█'},
					{'█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█'},
					{'█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█'},
					{'█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█'},
					{'█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█'},
					{'█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█'},
					{'█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█'},
					{'█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█'},
					{'█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█'},
					{'█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█'},
					{'█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█'},
					{'█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█'},
					{'█',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','█'},
					{'█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█','█'}};
			char[][] map = null;
			switch(whichMap) {
			case "map1P2":
				map = map1P2.clone();
				break;
			case "map2":
				map = map2.clone();
				break;
			case "map1P1":
				map = map1P1.clone();
				break;
			}
			
			char character = '☺';

		System.out.println("a left, d right, w up, s down");
		char userIn = event.getKeyChar();
		System.out.println("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");

		switch(userIn) {
		case 'a':
			if(map[place1][place2-1] == '█') {
				System.out.println("You can't go there!");
				map[place1][place2] = character;
				break;	
			}else {
				if(map[place1][place2-1] == '║') {
					whichMap = "map1P2";
					
					skip = true;
					switch(whichMap) {
					case "map1P2":
						map = map1P2.clone();
						break;
					case "map2":
						map = map2.clone();
						break;
					case "map1P1":
						map = map1P1.clone();
						break;
					}
					place1 = 2;
					place2 = 2;
					map[place1][place2] = character;
					break;
				}else {
				place2-=1;
				map[place1][place2] = character;
				break;
				}
			}
		case 'w':
			if(map[place1-1][place2] == '█') {
				System.out.println("You can't go there!");
				map[place1][place2] = character;
				break;	
			}else {
				place1-=1;
				map[place1][place2] = character;
				break;
			}
			
		case 's':
			if(map[place1+1][place2] == '█') {
				System.out.println("You can't go there!");
				map[place1][place2] = character;
				break;	
			}else {
				place1+=1;
				map[place1][place2] = character;
				break;
			}
		case 'd':
			if(map[place1][place2+1] == '█') {
				System.out.println("You can't go there!");
				map[place1][place2] = character;
				break;	
			}else {
				if(map[place1][place2+1] == '║') {
					whichMap = "map1P1";
					
					skip = true;
					switch(whichMap) {
					case "map1P2":
						map = map1P2.clone();
						break;
					case "map2":
						map = map2.clone();
						break;
					case "map1P1":
						map = map1P1.clone();
						break;
					}
					place1 = 2;
					place2 = 2;
					map[place1][place2] = character;
					break;
				}else {
				place2+=1;
				map[place1][place2] = character;
				break;
				}
			}
		case 'f':
			if(whichMap == "map1P2") {
				whichMap = "map1P1";
				skip = true;
				switch(whichMap) {
				case "map1P2":
					map = map1P2.clone();
					break;
				case "map2":
					map = map2.clone();
					break;
				case "map1P1":
					map = map1P1.clone();
					break;
				}
				place1 = 2;
				place2 = 2;
				map[place1][place2] = character;
				break;
			} else {
				whichMap = "map1P2";
				skip = true;
				switch(whichMap) {
				case "map1P2":
					map = map1P2.clone();
					break;
				case "map2":
					map = map2.clone();
					break;
				case "map1P1":
					map = map1P1.clone();
					break;
				}
				place1 = 2;
				place2 = 2;
				map[place1][place2] = character;
				break;
			}
		default:
			map[place1][place2] = character;
			System.out.println("Incorrect character entry, try again>>");
			break;
		}
		
		if(/*skip == false*/ true) {
		for(int i = 0; i < map.length; i++) {
			for(int j = 0; j < map[0].length;j++) {
				System.out.print(map[i][j]);
			}
			System.out.println();
		
		}
		}

	}
}